ols_lam_l = lam.seq[opt_lams[2]]
ols_srs_t[opt_lams]
# GLM
glm_srs_t <- findOptimalPtfs(glm_ptfs,ff$rf) # We want best performing up to last period
opt_lams = which(glm_srs_t == max(glm_srs_t,na.rm=TRUE),arr.ind = TRUE)
if (nrow(opt_lams)>1){
opt_lams = opt_lams[1,]
}
glm_lam_w = lam.seq[opt_lams[1]]
glm_lam_l = lam.seq[opt_lams[2]]
# XGB(R)
xgb_r_srs_t <- findOptimalPtfs(xgb_r_ptfs, ff$rf) # We want best performing up to last period
opt_lams = which(xgb_r_srs_t == max(xgb_r_srs_t,na.rm=TRUE),arr.ind = TRUE)
if (nrow(opt_lams)>1){
opt_lams = opt_lams[1,]
}
xgb_r_lam_w = lam.seq[opt_lams[1]]
xgb_r_lam_l = lam.seq[opt_lams[2]]
# XGB(C)
xgb_c_srs_t <- findOptimalPtfs(xgb_c_ptfs, ff$rf) # We want best performing up to last period
opt_lams = which(xgb_c_srs_t == max(xgb_c_srs_t),arr.ind = TRUE)
if (nrow(opt_lams)>1){
opt_lams = opt_lams[1,]
}
xgb_c_lam_w = lam.seq[opt_lams[1]]
xgb_c_lam_l = lam.seq[opt_lams[2]]
# Plots
plots <- list()
## GLM
colnames(glm_srs_t) <- rownames(glm_srs_t) <- lam.seq
df.glm <- as.data.frame(as.table(t(glm_srs_t)))
df.glm$Freq[!is.finite(df.glm$Freq)] <- min(df.glm$Freq[is.finite(df.glm$Freq)])
names(df.glm) <- c("X", "Y", "Value")
df.glm$X <- as.numeric(as.character(df.glm$X))
df.glm$Y <- as.numeric(as.character(df.glm$Y))
# Plot
plots[[2]] <-  levelplot(Value ~ X * Y, data=df.glm,
xlab="Lambda Loser", ylab="Lambda Winner",col.regions = coul,
main='GLM',
scales=list(x=list(at=seq(0, max(df.glm$X), by=0.05),
rot=45),
y=list(at=seq(0, max(df.glm$Y), by=0.05))),
panel=function(...) {
panel.levelplot(...)
panel.abline(h=glm_lam_w,lty=2)
panel.abline(v=glm_lam_l,lty=2)
})
## XGBC
colnames(xgb_c_srs_t) <- rownames(xgb_c_srs_t) <- lam.seq
df.xgb_c <- as.data.frame(as.table(t(xgb_c_srs_t)))
names(df.xgb_c) <- c("X", "Y", "Value")
df.xgb_c$X <- as.numeric(as.character(df.xgb_c$X))
df.xgb_c$Y <- as.numeric(as.character(df.xgb_c$Y))
# Plot
plots[[1]] <- levelplot(Value ~ X * Y, data=df.xgb_c,
xlab="Lambda Loser", ylab="Lambda Winner",col.regions = coul,
main='XGB(C)',
scales=list(x=list(at=seq(0, max(df.xgb_c$X), by=0.05),rot=45,
cex=1.5),
y=list(at=seq(0, max(df.xgb_c$Y), by=0.05),
cex=1.5),
xlab=list(cex=1.5),
ylab= list(cex=1.5)),
panel=function(...) {
panel.levelplot(...)
panel.abline(h=xgb_c_lam_w,lty=2)
panel.abline(v=xgb_c_lam_l,lty=2)
})
## XGBR
colnames(xgb_r_srs_t) <- rownames(xgb_r_srs_t) <- lam.seq
df.xgb_r <- as.data.frame(as.table(t(xgb_r_srs_t)))
names(df.xgb_r) <- c("X", "Y", "Value")
df.xgb_r$X <- as.numeric(as.character(df.xgb_r$X))
df.xgb_r$Y <- as.numeric(as.character(df.xgb_r$Y))
# Plot
plots[[3]] <- levelplot(Value ~ X * Y, data=df.xgb_r,
xlab="Lambda Loser", ylab="Lambda Winner",col.regions = coul,
main='XGB(R)',
scales=list(x=list(at=seq(0, max(df.xgb_r$X), by=0.05),rot=45),
y=list(at=seq(0, max(df.xgb_r$Y), by=0.05))),
panel=function(...) {
panel.levelplot(...)
panel.abline(h=1, col="red", lwd=1)
panel.abline(v=1, col="red", lwd=1)
panel.abline(h=xgb_r_lam_w,lty=2)
panel.abline(v=xgb_r_lam_l,lty=2)
})
## OLS
colnames(ols_srs_t) <- rownames(ols_srs_t) <- lam.seq
df.ols <- as.data.frame(as.table(t(ols_srs_t)))
names(df.ols) <- c("X", "Y", "Value")
df.ols$X <- as.numeric(as.character(df.ols$X))
df.ols$Y <- as.numeric(as.character(df.ols$Y))
# Plot
plots[[4]] <- levelplot(Value ~ X * Y, data=df.ols,
xlab="Lambda Loser", ylab="Lambda Winner",col.regions = coul,
main='OLS',
scales=list(x=list(at=seq(0, max(df.ols$X), by=0.05),rot=45),
y=list(at=seq(0, max(df.ols$Y), by=0.05))),
panel=function(...) {
panel.levelplot(...)
panel.abline(h=1, col="red", lwd=1)
panel.abline(v=1, col="red", lwd=1)
panel.abline(h=ols_lam_w,lty=2)
panel.abline(v=ols_lam_l,lty=2)
})
df.xgb_c
head(df.xgb_c)
head(ols_srs_t)
unname(ols_srs_t)
write.table(unname(ols_srs_t),file = '../images/ols_lambda_heatmap.dat',row.names = FALSE,col.names = FALSE)
write.table(unname(ols_srs_t),file = '../images/ols_lambda_heatmap.dat',row.names = FALSE,col.names = FALSE)
write.table(unname(xgb_c_srs_t),file = '../images/xgb_c_lambda_heatmap.dat',row.names = FALSE,col.names = FALSE)
write.table(unname(xgb_r_srs_t),file = '../images/xgb_r_lambda_heatmap.dat',row.names = FALSE,col.names = FALSE)
write.table(unname(glm_srs_t),file = '../images/glm_lambda_heatmap.dat',row.names = FALSE,col.names = FALSE)
any(is.na(ols_srs_t))
any(is.na(glm_srs_t))
glm_srs_t[is.na(glm_srs_t)] <- 0
xgb_r_srs_t[is.na(xgb_r_srs_t)] <- 0
write.table(unname(ols_srs_t),file = '../images/ols_lambda_heatmap.dat',row.names = FALSE,col.names = FALSE)
write.table(unname(xgb_c_srs_t),file = '../images/xgb_c_lambda_heatmap.dat',row.names = FALSE,col.names = FALSE)
write.table(unname(xgb_r_srs_t),file = '../images/xgb_r_lambda_heatmap.dat',row.names = FALSE,col.names = FALSE)
write.table(unname(glm_srs_t),file = '../images/glm_lambda_heatmap.dat',row.names = FALSE,col.names = FALSE)
cuol
coul
rgb_vals <- t(col2rgb(coul)) / 255
# Create Gnuplot palette definition
gp_palette <- paste0("(", paste(
sprintf("%d \"#%02X%02X%02X\"",
0:(length(coul)-1),
rgb_vals[,1]*255,
rgb_vals[,2]*255,
rgb_vals[,3]*255),
collapse = ", "), ")")
# Save to a text file
writeLines(paste("set palette defined", gp_palette), "../images/viridis_palette.gp")
xgb_c_lam_l
xgb_c_lam_w
xgb_c_lam_l
xgb_c_lam_w
glm_lam_l
glm_lam_w
xgb_r_lam_l
xgb_r_lam_w
ols_lam_l
ols_lam_w
could
coul
coul <- viridis(250)
coul
coul <- viridis(250)
rgb_vals <- t(col2rgb(coul)) / 255
# Create Gnuplot palette definition
gp_palette <- paste0("(", paste(
sprintf("%d \"#%02X%02X%02X\"",
0:(length(coul)-1),
rgb_vals[,1]*255,
rgb_vals[,2]*255,
rgb_vals[,3]*255),
collapse = ", "), ")")
# Save to a text file
writeLines(paste("set palette defined", gp_palette), "../images/viridis_palette.gp")
coul <- viridis(1000)
rgb_vals <- t(col2rgb(coul)) / 255
# Create Gnuplot palette definition
gp_palette <- paste0("(", paste(
sprintf("%d \"#%02X%02X%02X\"",
0:(length(coul)-1),
rgb_vals[,1]*255,
rgb_vals[,2]*255,
rgb_vals[,3]*255),
collapse = ", "), ")")
# Save to a text file
writeLines(paste("set palette defined", gp_palette), "../images/viridis_palette.gp")
length(unique(xgb_srs_t))
length(unique(xgb_c_srs_t))
coul <- viridis(20000)
rgb_vals <- t(col2rgb(coul)) / 255
# Create Gnuplot palette definition
gp_palette <- paste0("(", paste(
sprintf("%d \"#%02X%02X%02X\"",
0:(length(coul)-1),
rgb_vals[,1]*255,
rgb_vals[,2]*255,
rgb_vals[,3]*255),
collapse = ", "), ")")
# Save to a text file
writeLines(paste("set palette defined", gp_palette), "../images/viridis_palette.gp")
# Export colorbox
cb = matrix(seq(0,3.75,length.out=length(coul)))
# Export colorbox
cb = matrix(seq(0,3.75,length.out=length(coul)),nrow = 10,byrow = TRUE)
dim(cb)
head(cb)
cb[1:5,1:5]
# Export colorbox
cb = matrix(seq(0,3.75,length.out=length(coul)),nrow = 10,byrow = FALSE)
cb[1:5,1;5]
# Export colorbox
cb = matrix(seq(0,3.75,length.out=length(coul)),nrow = 10,byrow = FALSE)
cb[1:5,1;5]
cb[1:5,1:5]
# Export colorbox
cb = matrix(seq(0,3.75,length.out=length(coul)),ncol = 10,byrow = FALSE)
cb[1:5,1;5]
cb[1:5,1:5]
# Export colorbox
cb = matrix(rep(seq(0,3.75,length.out=length(coul)),each=length(ncoul)),ncol = 10,byrow = FALSE)
# Export colorbox
cb = matrix(rep(seq(0,3.75,length.out=length(coul)),each=length(coul)),ncol = 10,byrow = FALSE)
dim(cb)
# Export colorbox
cb = matrix(rep(seq(0,3.75,length.out=length(coul)),each=10),ncol = 10,byrow = FALSE)
dim(cb)
gc()
cb[1:5,1;5]
cb[1:5,1"5]
cb[1:5,1:5]
cb[1:5,1:5]
length(ncoul)
length(coul)
# Export colorbox
cb = matrix(rep(seq(0,3.75,length.out=length(coul)),each=10),ncol = 10,byrow = TRUE)
cb[1:5,1:5]
write.table(unname(cb),file = '../images/colorbox.dat',row.names = FALSE,col.names = FALSE)
# Export colorbox
cb = matrix(rep(seq(0,3.75,length.out=length(nrow(ols_srs_t))),each=10),ncol = 10,byrow = TRUE)
write.table(unname(cb),file = '../images/colorbox.dat',row.names = FALSE,col.names = FALSE)
cb
nrow(ols_srs_t)
cb
length(nrow(ols_srs_t))
# Export colorbox
cb = matrix(rep(seq(0,3.75,length.out=(nrow(ols_srs_t))),each=10),ncol = 10,byrow = TRUE)
write.table(unname(cb),file = '../images/colorbox.dat',row.names = FALSE,col.names = FALSE)
cb
nrow(ols_srs_t)
cb[,1]
seq(0,3.75,length.out=10)
seq(0,3.75,length.out=9)
seq(0,3.75,length.out=8)
seq(0,3.75,length.out=15)
seq(0,3.75,0.25)
cb[1,]
cb[,1]
cb[,25]
cb[25,1]
cb[20,1]
cb[10,1]
cb[12,1]
cb[11,1]
99+11
143+11
cb[143,1]
cb[22,1]
cb[21,1]
cb[,1]
cb[146,1]
max(xgb_c_srs_t)
dim(ols_ptfs)
length(ff)
rm(list=ls())
library(dplyr)
library(lubridate)
library(Rcpp)
library(lattice)
library(viridisLite)
library(RColorBrewer)
library(gridExtra)
source('../utils.R')
sourceCpp('findOptimalPtfs.cpp')
# Load Fama-French data for risk-free rate
ff <- read.csv('../../data/ff5f_mom_str_ltr.csv')
ff$rf = ff$rf/100
ff <- ff[ ,c("X",'rf')]
colnames(ff) <- c('yyyymm','rf')
ff <- ff[ff$yyyymm >= 197401 & ff$yyyymm <= 202112,]
ff
ff$yyyymm<198701
sum(ff$yyyymm<198701)
ff$yyyymm[156]
ols_ptf
ols_ptfs
dim(ols_ptfs)
rm(list=ls())
library(dplyr)
library(lubridate)
library(Rcpp)
library(lattice)
library(viridisLite)
library(RColorBrewer)
library(gridExtra)
source('../utils.R')
sourceCpp('findOptimalPtfs.cpp')
# Load Fama-French data for risk-free rate
ff <- read.csv('../../data/ff5f_mom_str_ltr.csv')
ff$rf = ff$rf/100
ff <- ff[ ,c("X",'rf')]
colnames(ff) <- c('yyyymm','rf')
ff <- ff[ff$yyyymm >= 197401 & ff$yyyymm <= 202112,]
sum(ff$yyyymm<198701)
# Lambda sequence
lam.seq <- seq(0,1.5,0.01)
# Load portfolio data.
ols_ptfs = readRDS('../03_PortfolioConstruction/OLS_Portfolios.RDS')
glm_ptfs = readRDS('../03_PortfolioConstruction/GLM_Portfolios.RDS')
xgb_r_ptfs = readRDS('../03_PortfolioConstruction/XGBR_Portfolios.RDS')
xgb_c_ptfs = readRDS('../03_PortfolioConstruction/XGBC_Portfolios.RDS')
dim(ols_ptfs)
start.idx = sum(ff$yyyymm<=198701)
start.idx
end.idx = nrow(ff)
# Load portfolio data.
ols_ptfs = readRDS('../03_PortfolioConstruction/OLS_Portfolios.RDS')[start.idx:end.idx,,]
dim(ols_ptfs)
# Load portfolio data.
ols_ptfs = readRDS('../03_PortfolioConstruction/OLS_Portfolios.RDS')[start.idx:end.idx,,]
glm_ptfs = readRDS('../03_PortfolioConstruction/GLM_Portfolios.RDS')[start.idx:end.idx,,]
xgb_r_ptfs = readRDS('../03_PortfolioConstruction/XGBR_Portfolios.RDS')[start.idx:end.idx,,]
xgb_c_ptfs = readRDS('../03_PortfolioConstruction/XGBC_Portfolios.RDS')[start.idx:end.idx,,]
# Select lambda for each time. We start from the first out-of-sample period.
sr.fun <- function(x,rf) sqrt(12)*(mean(x-rf))/sd(x)
ff <- ff[[start.idx:end.idx,]
ff <- ff[start.idx:end.idx,]
ff <- ff[start.idx:end.idx,]
# Select lambda for each time. We start from the first out-of-sample period.
sr.fun <- function(x,rf) sqrt(12)*(mean(x-rf))/sd(x)
# OLS
ols_srs_t <- findOptimalPtfs(ols_ptfs, ff$rf) # We want best performing up to last period
opt_lams = which(ols_srs_t == max(ols_srs_t,na.rm=TRUE),arr.ind = TRUE)
if (nrow(opt_lams)>1){
opt_lams = opt_lams[1,]
}
ols_lam_w = lam.seq[opt_lams[1]]
ols_lam_l = lam.seq[opt_lams[2]]
ols_srs_t[opt_lams]
# GLM
glm_srs_t <- findOptimalPtfs(glm_ptfs,ff$rf) # We want best performing up to last period
opt_lams = which(glm_srs_t == max(glm_srs_t,na.rm=TRUE),arr.ind = TRUE)
if (nrow(opt_lams)>1){
opt_lams = opt_lams[1,]
}
glm_lam_w = lam.seq[opt_lams[1]]
glm_lam_l = lam.seq[opt_lams[2]]
# XGB(R)
xgb_r_srs_t <- findOptimalPtfs(xgb_r_ptfs, ff$rf) # We want best performing up to last period
opt_lams = which(xgb_r_srs_t == max(xgb_r_srs_t,na.rm=TRUE),arr.ind = TRUE)
if (nrow(opt_lams)>1){
opt_lams = opt_lams[1,]
}
xgb_r_lam_w = lam.seq[opt_lams[1]]
xgb_r_lam_l = lam.seq[opt_lams[2]]
# XGB(C)
xgb_c_srs_t <- findOptimalPtfs(xgb_c_ptfs, ff$rf) # We want best performing up to last period
opt_lams = which(xgb_c_srs_t == max(xgb_c_srs_t),arr.ind = TRUE)
if (nrow(opt_lams)>1){
opt_lams = opt_lams[1,]
}
xgb_c_lam_w = lam.seq[opt_lams[1]]
xgb_c_lam_l = lam.seq[opt_lams[2]]
# Plots
plots <- list()
## GLM
colnames(glm_srs_t) <- rownames(glm_srs_t) <- lam.seq
df.glm <- as.data.frame(as.table(t(glm_srs_t)))
df.glm$Freq[!is.finite(df.glm$Freq)] <- min(df.glm$Freq[is.finite(df.glm$Freq)])
names(df.glm) <- c("X", "Y", "Value")
df.glm$X <- as.numeric(as.character(df.glm$X))
df.glm$Y <- as.numeric(as.character(df.glm$Y))
# Plot
plots[[2]] <-  levelplot(Value ~ X * Y, data=df.glm,
xlab="Lambda Loser", ylab="Lambda Winner",col.regions = coul,
main='GLM',
scales=list(x=list(at=seq(0, max(df.glm$X), by=0.05),
rot=45),
y=list(at=seq(0, max(df.glm$Y), by=0.05))),
panel=function(...) {
panel.levelplot(...)
panel.abline(h=glm_lam_w,lty=2)
panel.abline(v=glm_lam_l,lty=2)
})
## XGBC
colnames(xgb_c_srs_t) <- rownames(xgb_c_srs_t) <- lam.seq
df.xgb_c <- as.data.frame(as.table(t(xgb_c_srs_t)))
names(df.xgb_c) <- c("X", "Y", "Value")
glm_srs_t[is.na(glm_srs_t)] <- 0
xgb_c_srs_t[is.na(xgb_c_srs_t)] <- 0
xgb_r_srs_t[is.na(xgb_r_srs_t)] <- 0
write.table(unname(ols_srs_t),file = '../images/ols_lambda_heatmap.dat',row.names = FALSE,col.names = FALSE)
write.table(unname(xgb_c_srs_t),file = '../images/xgb_c_lambda_heatmap.dat',row.names = FALSE,col.names = FALSE)
write.table(unname(xgb_r_srs_t),file = '../images/xgb_r_lambda_heatmap.dat',row.names = FALSE,col.names = FALSE)
write.table(unname(glm_srs_t),file = '../images/glm_lambda_heatmap.dat',row.names = FALSE,col.names = FALSE)
coul <- viridis(20000)
rgb_vals <- t(col2rgb(coul)) / 255
# Create Gnuplot palette definition
gp_palette <- paste0("(", paste(
sprintf("%d \"#%02X%02X%02X\"",
0:(length(coul)-1),
rgb_vals[,1]*255,
rgb_vals[,2]*255,
rgb_vals[,3]*255),
collapse = ", "), ")")
# Save to a text file
writeLines(paste("set palette defined", gp_palette), "../images/viridis_palette.gp")
# Export colorbox
cb = matrix(rep(seq(0,3.75,length.out=(nrow(ols_srs_t))),each=10),ncol = 10,byrow = TRUE)
write.table(unname(cb),file = '../images/colorbox.dat',row.names = FALSE,col.names = FALSE)
cb
nrow(ols_srs_t)
seq(0,3.75,length.out=15)
seq(0,3.75,0.25)
max(ols_srs_t)
max(xgb_c_srs_t)
max(xgb_r_srs_t)
max(glm_srs_t)
xgb_c_lam_l
xgb_c_lam_w
xgb_r_lam_l
xgb_r_lam_w
max(xgb_c_srs_t)
sr.seq = seq(0,3.75,length.out=(nrow(ols_srs_t))
which.min(abs(sr.seq-max(xgb_c_srs_t)))
sr.seq = seq(0,3.75,length.out=(nrow(ols_srs_t)
sr.seq = seq(0,3.75,length.out=(nrow(ols_srs_t)))
sr.seq = seq(0,3.75,length.out=(nrow(ols_srs_t)))
which.min(abs(sr.seq-max(xgb_c_srs_t)))
glm_lam_l
glm_lam_w
which.min(abs(sr.seq-max(glm_srs_t)))
xgb_r_lam_l
xgb_r_lam_w
which.min(abs(sr.seq-max(xgb_r_srs_t)))
ols_lam_l
ols_lam_w
which.min(abs(sr.seq-max(ols_srs_t)))
sr.seq[81]
sr.seq[80]
rm(list=ls())
library(dplyr)
library(lubridate)
library(Rcpp)
library(lattice)
library(viridisLite)
library(RColorBrewer)
library(gridExtra)
source('../utils.R')
sourceCpp('findOptimalPtfs.cpp')
# Load Fama-French data for risk-free rate
ff <- read.csv('../../data/ff5f_mom_str_ltr.csv')
ff$rf = ff$rf/100
ff <- ff[ ,c("X",'rf')]
colnames(ff) <- c('yyyymm','rf')
ff <- ff[ff$yyyymm >= 197401 & ff$yyyymm <= 202112,]
start.idx = sum(ff$yyyymm<=198701)
end.idx = nrow(ff)
# Lambda sequence
lam.seq <- seq(0,1.5,0.01)
# Load portfolio data.
ols_ptfs = readRDS('../03_PortfolioConstruction/OLS_Portfolios.RDS')[start.idx:end.idx,,]
glm_ptfs = readRDS('../03_PortfolioConstruction/GLM_Portfolios.RDS')[start.idx:end.idx,,]
xgb_r_ptfs = readRDS('../03_PortfolioConstruction/XGBR_Portfolios.RDS')[start.idx:end.idx,,]
xgb_c_ptfs = readRDS('../03_PortfolioConstruction/XGBC_Portfolios.RDS')[start.idx:end.idx,,]
ff <- ff[start.idx:end.idx,]
# Select lambda for each time. We start from the first out-of-sample period.
sr.fun <- function(x,rf) sqrt(12)*(mean(x-rf))/sd(x)
# OLS
ols_srs_t <- findOptimalPtfs(ols_ptfs, ff$rf) # We want best performing up to last period
opt_lams = which(ols_srs_t == max(ols_srs_t,na.rm=TRUE),arr.ind = TRUE)
if (nrow(opt_lams)>1){
opt_lams = opt_lams[1,]
}
ols_lam_w = lam.seq[opt_lams[1]]
ols_lam_l = lam.seq[opt_lams[2]]
ols_srs_t[opt_lams]
# GLM
glm_srs_t <- findOptimalPtfs(glm_ptfs,ff$rf) # We want best performing up to last period
opt_lams = which(glm_srs_t == max(glm_srs_t,na.rm=TRUE),arr.ind = TRUE)
if (nrow(opt_lams)>1){
opt_lams = opt_lams[1,]
}
glm_lam_w = lam.seq[opt_lams[1]]
glm_lam_l = lam.seq[opt_lams[2]]
# XGB(R)
xgb_r_srs_t <- findOptimalPtfs(xgb_r_ptfs, ff$rf) # We want best performing up to last period
opt_lams = which(xgb_r_srs_t == max(xgb_r_srs_t,na.rm=TRUE),arr.ind = TRUE)
if (nrow(opt_lams)>1){
opt_lams = opt_lams[1,]
}
xgb_r_lam_w = lam.seq[opt_lams[1]]
xgb_r_lam_l = lam.seq[opt_lams[2]]
# XGB(C)
xgb_c_srs_t <- findOptimalPtfs(xgb_c_ptfs, ff$rf) # We want best performing up to last period
opt_lams = which(xgb_c_srs_t == max(xgb_c_srs_t),arr.ind = TRUE)
if (nrow(opt_lams)>1){
opt_lams = opt_lams[1,]
}
xgb_c_lam_w = lam.seq[opt_lams[1]]
xgb_c_lam_l = lam.seq[opt_lams[2]]
max(xgb_c_srs_t)
xgb_c_lam_l
xgb_c_lam_w
max(xgb_r_srs_t)
xgb_r_lam_l
xgb_r_lam_w
max(glm_srs_t)
max(glm_srs_t,na.rm=TRUE)
glm_lam_l
glm_lam_w
max(ols_srs_t)
ols_lam_l
ols_lam_l
ols_lam_w
